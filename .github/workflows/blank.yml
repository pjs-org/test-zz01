# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  workflow_dispatch:
   inputs:
    BRANCH:
      default: 'master'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "job1"
  job1:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.step1.outputs.test }}
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
    - name: Get the version from pom.xml
      run: |
        PROJ_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        echo $PROJ_VERSION
        #replace . with space so can split into an array
        VERSION_BITS=(${PROJ_VERSION//./ })
        #get number parts and increase last one by 1
        VNUM1=${VERSION_BITS[0]}
        VNUM2=${VERSION_BITS[1]}
        VNUM3=${VERSION_BITS[2]}
        #bump minor version
        VNUM2=$((VNUM2+1))
        VNUM3=0
        #create new tag
        NEW_TAG="$VNUM1.$VNUM2.$VNUM3-SNAPSHOT"
        echo "Updating $PROJ_VERSION to $NEW_TAG"
        mvn versions:set -DnewVersion=$NEW_TAG
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git status
        git add pom.xml
        git commit -m "Updating $PROJ_VERSION to $NEW_TAG"
        git push origin master

    # Steps represent a sequence of tasks that will be executed as part of the job
    #steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #- uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      #- name: Run a multi-line script
       # run: |
        #   chmod +x auto-increment-version.sh
        #   echo "NEW_TAG=$(./auto-increment-version.sh)" >> $GITHUB_ENV
        #   echo "${{ env.NEW_TAG }}"
        #   echo "Updating version to ${{ env.NEW_TAG }}" 
          # mvn versions:set -DnewVersion=$NEW_TAG
          # git config user.name "${GITHUB_ACTOR}"
         # git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
         #  git status
         #  git add pom.xml
          # git commit -m "blah blah"
           
   #####################################################
         # REL_VER=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout) 
         #echo REL_VER >> "$GITHUB_ENV"
         # echo $REL_VER
          
